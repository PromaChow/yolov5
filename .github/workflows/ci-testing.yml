name: YOLOv5 CI
on:
  push:
    branches:
      - main

jobs:
  Benchmarks:
    runs-on: ${{ matrix.os }}
    steps:
      - name: Start Energy Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: start-measurement
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: astral-sh/setup-uv@v6
      - name: Install requirements
        run: 'uv pip install --system -r requirements.txt coremltools openvino-dev
          tensorflow --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy
          unsafe-best-match

          yolo checks

          uv pip list

          '
      - id: measurement-5
        name: Record Measurement After Install requirements
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: Install requirements
          task: get-measurement
      - name: Benchmark DetectionModel
        run: 'python benchmarks.py --data coco128.yaml --weights ${{ matrix.model
          }}.pt --img 320 --hard-fail 0.29

          '
      - id: measurement-7
        name: Record Measurement After Benchmark DetectionModel
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: Benchmark DetectionModel
          task: get-measurement
      - name: Benchmark SegmentationModel
        run: 'python benchmarks.py --data coco128-seg.yaml --weights ${{ matrix.model
          }}-seg.pt --img 320 --hard-fail 0.22

          '
      - id: measurement-9
        name: Record Measurement After Benchmark SegmentationModel
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: Benchmark SegmentationModel
          task: get-measurement
      - name: Test predictions
        run: 'python export.py --weights ${{ matrix.model }}-cls.pt --include onnx
          --img 224

          python detect.py --weights ${{ matrix.model }}.onnx --img 320

          python segment/predict.py --weights ${{ matrix.model }}-seg.onnx --img 320

          python classify/predict.py --weights ${{ matrix.model }}-cls.onnx --img
          224

          '
      - id: measurement-11
        name: Record Measurement After Test predictions
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: Test predictions
          task: get-measurement
      - id: display-measurement
        name: Display Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: display-results
      - name: Save Total Energy Consumption Data
        run: echo '${{ steps.final-measurement.outputs.data-total-json }}' > total_energy_consumption.json
      - name: Upload Energy Consumption Artifact
        uses: actions/upload-artifact@v4
        with:
          name: total-energy-consumption
          path: total_energy_consumption.json
    strategy:
      fail-fast: false
      matrix:
        model:
          - yolov5n
        os:
          - ubuntu-latest
        python-version:
          - '3.11'
  Summary:
    if: always()
    needs:
      - Benchmarks
      - Tests
    runs-on: ubuntu-latest
    steps:
      - name: Start Energy Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: start-measurement
      - if: (needs.Benchmarks.result == 'failure' || needs.Tests.result == 'failure'
          || needs.Benchmarks.result == 'cancelled' || needs.Tests.result == 'cancelled')
          && github.repository == 'ultralytics/yolov5' && (github.event_name == 'schedule'
          || github.event_name == 'push') && github.run_attempt == '1'
        name: Check for failure and notify
        uses: slackapi/slack-github-action@v2.1.0
        with:
          payload: "text: \"<!channel> GitHub Actions error for ${{ github.workflow\
            \ }} \u274C\\n\\n\\n*Repository:* https://github.com/${{ github.repository\
            \ }}\\n*Action:* https://github.com/${{ github.repository }}/actions/runs/${{\
            \ github.run_id }}\\n*Author:* ${{ github.actor }}\\n*Event:* ${{ github.event_name\
            \ }}\\n\"\n"
          webhook: ${{ secrets.SLACK_WEBHOOK_URL_YOLO }}
          webhook-type: incoming-webhook
      - id: display-measurement
        name: Display Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: display-results
      - name: Save Total Energy Consumption Data
        run: echo '${{ steps.final-measurement.outputs.data-total-json }}' > total_energy_consumption.json
      - name: Upload Energy Consumption Artifact
        uses: actions/upload-artifact@v4
        with:
          name: total-energy-consumption
          path: total_energy_consumption.json
  Tests:
    runs-on: ${{ matrix.os }}
    steps:
      - name: Start Energy Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: start-measurement
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: astral-sh/setup-uv@v6
      - name: Install requirements
        run: "torch=\"\"\nif [ \"${{ matrix.torch }}\" == \"1.8.0\" ]; then\n  torch=\"\
          torch==1.8.0 torchvision==0.9.0\"\nfi\nuv pip install --system -r requirements.txt\
          \ $torch --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy\
          \ unsafe-best-match\n"
        shell: bash
      - id: measurement-5
        name: Record Measurement After Install requirements
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: Install requirements
          task: get-measurement
      - name: Check environment
        run: 'yolo checks

          pip list

          '
      - id: measurement-7
        name: Record Measurement After Check environment
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: Check environment
          task: get-measurement
      - name: Test detection
        run: "# export PYTHONPATH=\"$PWD\"  # to run '$ python *.py' files in subdirectories\n\
          m=${{ matrix.model }}  # official weights\nb=runs/train/exp/weights/best\
          \  # best.pt checkpoint\npython train.py --imgsz 64 --batch 32 --weights\
          \ $m.pt --cfg $m.yaml --epochs 1 --device cpu  # train\nfor d in cpu; do\
          \  # devices\n  for w in $m $b; do  # weights\n    python val.py --imgsz\
          \ 64 --batch 32 --weights $w.pt --device $d  # val\n    python detect.py\
          \ --imgsz 64 --weights $w.pt --device $d  # detect\n  done\ndone\npython\
          \ hubconf.py --model $m  # hub\n# python models/tf.py --weights $m.pt  #\
          \ build TF model\npython models/yolo.py --cfg $m.yaml  # build PyTorch model\n\
          python export.py --weights $m.pt --img 64 --include torchscript  # export\n\
          python - <<EOF\nimport torch\nim = torch.zeros([1, 3, 64, 64])\nfor path\
          \ in '$m', '$b':\n    model = torch.hub.load('.', 'custom', path=path, source='local')\n\
          \    print(model('data/images/bus.jpg'))\n    model(im)  # warmup, build\
          \ grids for trace\n    torch.jit.trace(model, [im])\nEOF\n"
        shell: bash
      - id: measurement-9
        name: Record Measurement After Test detection
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: Test detection
          task: get-measurement
      - name: Test segmentation
        run: "m=${{ matrix.model }}-seg  # official weights\nb=runs/train-seg/exp/weights/best\
          \  # best.pt checkpoint\npython segment/train.py --imgsz 64 --batch 32 --weights\
          \ $m.pt --cfg $m.yaml --epochs 1 --device cpu  # train\npython segment/train.py\
          \ --imgsz 64 --batch 32 --weights '' --cfg $m.yaml --epochs 1 --device cpu\
          \  # train\nfor d in cpu; do  # devices\n  for w in $m $b; do  # weights\n\
          \    python segment/val.py --imgsz 64 --batch 32 --weights $w.pt --device\
          \ $d  # val\n    python segment/predict.py --imgsz 64 --weights $w.pt --device\
          \ $d  # predict\n    python export.py --weights $w.pt --img 64 --include\
          \ torchscript --device $d  # export\n  done\ndone\n"
        shell: bash
      - id: measurement-11
        name: Record Measurement After Test segmentation
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: Test segmentation
          task: get-measurement
      - name: Test classification
        run: "m=${{ matrix.model }}-cls.pt  # official weights\nb=runs/train-cls/exp/weights/best.pt\
          \  # best.pt checkpoint\npython classify/train.py --imgsz 32 --model $m\
          \ --data mnist160 --epochs 1  # train\npython classify/val.py --imgsz 32\
          \ --weights $b --data ../datasets/mnist160  # val\npython classify/predict.py\
          \ --imgsz 32 --weights $b --source ../datasets/mnist160/test/7/60.png  #\
          \ predict\npython classify/predict.py --imgsz 32 --weights $m --source data/images/bus.jpg\
          \  # predict\npython export.py --weights $b --img 64 --include torchscript\
          \  # export\npython - <<EOF\nimport torch\nfor path in '$m', '$b':\n   \
          \ model = torch.hub.load('.', 'custom', path=path, source='local')\nEOF\n"
        shell: bash
      - id: measurement-13
        name: Record Measurement After Test classification
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: Test classification
          task: get-measurement
      - id: display-measurement
        name: Display Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: display-results
      - name: Save Total Energy Consumption Data
        run: echo '${{ steps.final-measurement.outputs.data-total-json }}' > total_energy_consumption.json
      - name: Upload Energy Consumption Artifact
        uses: actions/upload-artifact@v4
        with:
          name: total-energy-consumption
          path: total_energy_consumption.json
    strategy:
      fail-fast: false
      matrix:
        include:
          - model: yolov5n
            os: ubuntu-latest
            python-version: '3.8'
            torch: 1.8.0
        model:
          - yolov5n
        os:
          - ubuntu-latest
          - windows-latest
          - macos-14
        python-version:
          - '3.11'
    timeout-minutes: 60
permissions:
  contents: read
